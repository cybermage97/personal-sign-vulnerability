import Web3 from "web3";

const connect = async () => {
  document.querySelector(".error").innerHTML = "";

  if (!window.ethereum) {
    console.log("Install metamask");
  }

  const web3 = new Web3(window.ethereum);

  try {
    const [userAddr] = await web3.eth.requestAccounts();
    return [web3, userAddr];
  } catch (error) {
    document.querySelector(".error").innerHTML = error.message;
    console.log(error);
  }
};

const updateAccount = async (web3, addr) => {
  const connectBtn = document.querySelector("#connect-btn");
  const transactBtn = document.querySelector("#transact-btn");
  const singBtn = document.querySelector("#sign-btn");
  const singInput = document.querySelector("#sign-input");

  const accountBlock = document.querySelector("#account");
  const valueAddress = document.querySelector("#address");
  const valueBalance = document.querySelector("#balance");
  const valueGasPrice = document.querySelector("#gas-price");
  const valueChain = document.querySelector("#chain");

  const balance = await web3.eth.getBalance(addr);
  const gasPrice = await web3.eth.getGasPrice();
  const chainId = await web3.eth.getChainId();

  valueAddress.innerText = addr;
  valueBalance.innerText = parseFloat(web3.utils.fromWei(balance, "ether")).toFixed(2);
  valueGasPrice.innerText = parseFloat(web3.utils.fromWei(gasPrice, "gwei")).toFixed(2);
  valueChain.innerText = chainId;

  connectBtn.style.display = "none";
  accountBlock.style.display = "block";
  transactBtn.style.display = "inline";
  singBtn.style.display = "inline";
  singInput.style.display = "inline";
};

export { connect, updateAccount };
